**Este archivo corresponde a la versi√≥n en espa√±ol de la documentaci√≥n del proyecto.  
Para la versi√≥n en ingl√©s, consulta el archivo [`readme_en.md`](readme_en.md).**

# üìå UltimateLibraryBE - API DE GESTI√ìN DE LIBROS

Backend para la gesti√≥n de libros, desarrollado con las siguientes tecnolog√≠as:

- Node.js
- Express
- dotenv
- MongoDB (Mongoose)
- uuid
- Postman (pruebas)

## üåü Caracter√≠sticas

- Operaciones **CRUD** completas para la entidad libros.
- **Gesti√≥n detallada de errores** y respuestas claras ante situaciones como:
  - Falta de informaci√≥n o identificadores inv√°lidos.
  - Errores internos del servidor (500).
  - Solicitudes incorrectas o mal formadas (400).

## üõ†Ô∏è Instalaci√≥n

1. **Clonar el proyecto:**
   ```bash
   git clone https://github.com/fabinnerself/ultimateLibraryBE.git  
   cd ultimateLibraryBE
   ```

2. **Instalar dependencias:**
   ```bash
   npm install
   ```

3. **Configurar la base de datos:**
   - Aseg√∫rate de tener una instancia de MongoDB en funcionamiento, ya sea de forma local (`mongodb://localhost:27017`) o utilizando un servidor en la nube como MongoDB Atlas (por ejemplo:  
     `mongodb+srv://{usuario}:{contrase√±a}@mymongodb.aofqgrl.mongodb.net/?retryWrites=true&w=majority&appName=mymongodb`).
   - Verifica que exista la base de datos llamada `mymongodb` y que contenga datos o est√© vac√≠a, seg√∫n tus necesidades.

4. **Configurar variables de entorno:**
   - Copia el archivo `.env.template` a `.env` y verifica que la configuraci√≥n de la base de datos MongoDB sea correcta.

5. **Ejecutar en modo desarrollo:**
   ```bash
   node index.js
   ```

6. **Probar los endpoints:**
   - Utiliza Postman u otra herramienta para consumir los endpoints de la API.

7. **Pruebas automatizadas en Postman:**
   - Las pruebas de la API se han realizado en Postman, utilizando variables globales para facilitar la reutilizaci√≥n y automatizaci√≥n de los tests.
   - Variables principales:
     - `BaseURl_booksP`: Define la URL base del recurso de libros, permitiendo adaptar los endpoints a diferentes entornos.
     - `Libro_Id`: Almacena el identificador √∫nico de un libro creado durante las pruebas, permitiendo encadenar operaciones (consultar, modificar, eliminar).
   - Ejemplo de uso en las peticiones:
     ```
     {{BaseURl_booksP}}/api/v1/books/{{Libro_Id}}
     ```
   - Flujo t√≠pico de pruebas:
     1. **Listar libros:** Este endpoint lista todos los registros de libros no utiliza la variable global Libro_Id. Durante las pruebas, se valida que la respuesta de la API tenga un c√≥digo de estado HTTP 200, que el mensaje sea el esperado y que la respuesta sea un objeto que contenga exactamente las claves 'msg', 'data', 'totalItems', 'totalPages', 'limit' y 'currentPage', asegurando as√≠ que la estructura del resultado sea la adecuada.
     2. **Crear un libro:** Se realiza una petici√≥n POST y se guarda el ID en la variable global.     
     3. **Obtener libro por ID:** Se consulta el libro reci√©n creado.
     4. **Modificar libro:** Se actualiza el libro usando el mismo ID.
     5. **Eliminar libro:** Se elimina el libro y se comprueba que ya no existe.
   - Este enfoque garantiza que las pruebas sean din√°micas, repetibles y no dependan de datos est√°ticos, mejorando la robustez y confiabilidad del testing.
   - En el directorio `./test/` se incluyen los archivos:
     - `be_l_res_sumary.png`:  Resumen de resultados de las pruebas.

![resumen](./test/be_l_res_sumary.png)

     - `be_l_test_res_det.png`: Detalle de los resultados de las pruebas.

 ![detalle](./test/be_l_test_res_det.png)

     - `Backend Libros.postman_test_run.json`: Archivo exportado de Postman con el detalle completo de la ejecuci√≥n de las pruebas.
     
  [Detalle JSON](./test/Backend%20Libros.postman_test_run.json)

   - Para m√°s detalles sobre la estructura y ejecuci√≥n de las pruebas, consulta el archivo JSON incluido, que puede ser importado directamente en Postman para replicar el proceso.

   - A continuaci√≥n se muestra un fragmento del script en JavaScript utilizado en Postman para automatizar y validar las respuestas de la API durante las pruebas. Este script se ejecuta autom√°ticamente despu√©s de realizar una petici√≥n, permitiendo verificar tanto el estado de la respuesta como el contenido recibido, y gestionar variables globales para encadenar pruebas.

     ```javascript
     pm.test("Response status code is 200", function () {
         pm.expect(pm.response.code).to.equal(200);
     });

     const response = pm.response.json();
     console.log(response.msg);
     console.log(`Mensaje: ${response.msg}`);

     pm.test("Message should be 'OK'", () => {
         pm.expect(response.msg).to.eql('Ok');
         console.log("id val: ",response.data._id)
         pm.globals.set("Libro_Id",response.data._id)
     });

     pm.test("Ensure Response should have saved correctly", () => {
         const libroId = pm.globals.get("Libro_Id");
         pm.expect(libroId).to.exist; 
         pm.expect(libroId).to.not.be.empty; 
     });
     ```
     Este script automatiza la validaci√≥n de respuestas y el manejo de variables globales para encadenar pruebas.

---

## üìò Documentaci√≥n de la API

Este backend est√° dise√±ado para gestionar operaciones esenciales relacionadas con libros, permitiendo el manejo eficiente de su cat√°logo.

La entidad **Libro** permite el control del cat√°logo, incluyendo nombre, autor, precio, descripcion. El sistema asegura integridad y consistencia en cada transacci√≥n, facilitando operaciones como el registro, modificaci√≥n, consulta y eliminaci√≥n de registros.

### üîó Rutas disponibles

| Recurso | URL Base |
|---------|----------|
| Libros  | [https://tmp-seven-azure.vercel.app/api/v1/books/](https://tmp-seven-azure.vercel.app/api/v1/books/) |

La documentaci√≥n completa de los endpoints, ejemplos de uso y respuestas esperadas est√° disponible en Postman: [Postman Documentation](https://documenter.getpostman.com/view/22674808/2sB34mjdwu).

---

## üßæ Descripci√≥n de la Entidad

### üìö Libros

Representa un libro disponible en la biblioteca. Contiene informaci√≥n detallada como su t√≠tulo, autor, g√©nero, a√±o de publicaci√≥n y estado actual (activo o bloqueado). Adem√°s, registra las fechas de creaci√≥n y √∫ltima actualizaci√≥n.

**Operaciones soportadas:**

- `GET /api/v1/books` - Listar todos los libros
- `GET /api/v1/books/:id` - Obtener libro por ID
- `POST /api/v1/books` - Crear nuevo libro
- `PUT /api/v1/books/:id` - Actualizar libro
- `DELETE /api/v1/books/:id` - Eliminar libro

---

## üß™ Ejemplos de uso

### Crear Libro
```json
POST /api/v1/books
{
  "name": "Cien A√±os de Soledad",
  "autor": "Gabriel Garc√≠a M√°rquez",
  "genero": "Realismo m√°gico",
  "precio": 1967
}
```

### Obtener Libro por ID
```bash
GET /api/v1/books/:id
```

### Actualizar Libro
```json
PUT /api/v1/books/:id
{
  "titulo": "Cien A√±os de Soledad",
  "autor": "Gabriel Garc√≠a M√°rquez",
  "genero": "Realismo m√°gico",
  "anio_publicacion": 1967,
  "estado": "bloqueado"
}
```

### Eliminar Libro
```bash
DELETE /api/v1/books/:id
```

---

## ü§ù Contribuci√≥n y agradecimientos

Este backend fue desarrollado tomando como referencia recursos y proyectos previos, que sirvieron de base para su estructura y funcionalidad. En particular, se adaptaron y extendieron conceptos presentados en el siguiente video y repositorio:

- [Video tutorial: Node.js REST API with MongoDB](https://www.youtube.com/watch?v=D7lDiFWF_vA)
- [Repositorio base](https://github.com/nhndev/node-mongodb-api.git)

Ambos recursos proporcionaron una gu√≠a fundamental para la creaci√≥n de la arquitectura inicial. A partir de esa base, el proyecto fue adecuado para ajustarse a los requerimientos espec√≠ficos de la gesti√≥n de libros, incorporando pruebas automatizadas y documentaci√≥n detallada.

Agradezco a los autores originales por compartir su conocimiento y facilitar el aprendizaje y desarrollo de nuevas soluciones.

¬°Las contribuciones son bienvenidas! Por favor, env√≠a un pull request, haz un fork o abre un issue para reportar errores o sugerir nuevas caracter√≠sticas.

---

## üìú Licencia

Este proyecto est√° bajo la licencia MIT. Para m√°s detalles sobre los t√©rminos de la licencia, visita [MIT License](https://choosealicense.com/licenses/mit/).

---

## üöÄ Autor

üë§ Favian Medina Gemio

| Recurso      | Direcci√≥n                                                                 |
|--------------|---------------------------------------------------------------------------|
| üìß Email     | [favian.medina.gemio@gmail.com](mailto:favian.medina.gemio@gmail.com)     |
| üíª GitHub    | [https://github.com/fabinnerself](https://github.com/fabinnerself)        |
| üß† LinkedIn  | [https://www.linkedin.com/in/favian-medina-gemio/](https://www.linkedin.com/in/favian-medina-gemio/) |
| üíº Portafolio| [https://favian-medina-cv.vercel.app/](https://favian-medina-cv.vercel.app/) |

(c) 2025
 